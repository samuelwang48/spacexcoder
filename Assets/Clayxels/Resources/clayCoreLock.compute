#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#include"claySDF.compute"
RWStructuredBuffer<int> indirectChunkArgs1,indirectChunkArgs2,indirectChunkArgs3;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int2> pointCloudData,chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;
#if DRAW_DEBUG
RWStructuredBuffer<float3> debugGridOutPoints;
#endif
StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;static const int3 localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int f,int i,int x,int o){return f+o*(i+o*x);}uint f(float3 i){uint t=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return t;}uint f(uint f,uint x,uint y,uint z,uint t){uint s=(((f<<6|x)<<6|y)<<6|z)<<8|t;return s;}void f(int f,out int s[5]){s[4]=f&255,f>>=8,s[3]=f&63,f>>=6,s[2]=f&63,f>>=6,s[1]=f&63,f>>=6,s[0]=f&63;}uint s(float f,float i,float s,float x){uint r=uint(round(f*63.)),u=uint(round(i*63.)),z=uint(round(s*63.)),t=uint((x+1.)*.5*16383.),c=((r<<6|u)<<6|z)<<14|t;return c;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float s=float(i&63)/63;i>>=6;float x=float(i&63)/63,u=float(i>>6)/63;return float4(u,x,s,f);}float f(float f,float x,float i){float s=max(i-abs(f-x),0.);return min(f,x)-s*s*.25f/i;}float s(float f,float x,float i){float s=abs(i),u=max(s-abs(-f-x),0.);return max(-f,x)+u*u*.25/s;}bool s(uint f,uint c){uint t=c/32;int i=solidsFilter[f*maxSolidsPerVoxelMask+t],u=c-32*t;if(i>>u&1)return true;return true;}void t(uint f,uint c){uint t=c/32;int s=solidsFilter[f*maxSolidsPerVoxelMask+t],i=c-32*t;solidsFilter[f*maxSolidsPerVoxelMask+t]=s&~(1<<i);}bool t(int f){return f>>0&1;}float s(float3 i,float x,float m,uint y,uint c){float u;u=1e+10;int k=0;uint e=c*maxSolidsPerVoxel;for(uint r=0;r<y;++r){if(!s(c,r)){continue;}uint d=prefilteredSolidIds[e+r];float3 o=solidsScale[d];float z=(o.x+o.y+o.z)*.333333,M=solidsBlend[d]*z;float4 S=solidsAttrs[d];float g=computeClayDistanceFunction(solidsType[d],i,solidsPos[d],solidsRot[d],o,S,z);if(!t(S.w)){if(M==0.)u=min(g,u);else if(M>0.)u=f(g,u,M);else u=s(g,u,M);}if(g>m)t(c,r);m-=abs(M);}return u;}float f(float3 i,float x,out int y,out float3 u,uint c,uint g,uint z){float m;m=1e+10;u=float3(1.,1.,1.);uint e=g*maxSolidsPerVoxel;for(uint r=0;r<c;++r){if(!s(g,r)){continue;}uint d=prefilteredSolidIds[e+r];float3 o=solidsScale[d];float n=(o.x+o.y+o.z)*.333333,M=solidsBlend[d]*n;float3 S=solidsColor[d];float4 k=solidsAttrs[d];float D=computeClayDistanceFunction(solidsType[d],i,solidsPos[d],solidsRot[d],o,k,n);if(D<m)y=d;bool w=t(k.w);if(M==0.){float p=clamp((m-D)/(x*2.),0.,1.);u=lerp(u,S,p);if(!w)m=min(D,m);}else if(M>0.){float p=clamp(.5+.5*(D-m)/M,0.,1.);u=lerp(S,u,p);if(!w)m=f(D,m,M);}else{float p=clamp(.5+.5*(-D-m)/M,0.,1.);u=lerp(S,u,p);if(!w)m=s(D,m,M);if(p<.5)y=d;}}return m;}float3 d(uint i){int f=(i&255)>>0,u=(i&65280)>>8,M=(i&16711680)>>16;return float3(f/255.,u/255.,M/255.);}int3 c(uint i){int f=(i&255)>>0,u=(i&65280)>>8,M=(i&16711680)>>16;return int3(f,u,M);}bool r(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float n(int4 f){float t=0.;for(uint i=0;i<numSolids;++i)t+=abs(solidsBlend[i]);return t;}float3 c(int3 f,float i){float t=i*.5,u=chunkSize*.5;float3 s=float3(i*f.x-u,i*f.y-u,i*f.z-u)+t;return s;}void c(float3 f,float x,uint c,inout uint i,inout float m){uint t=numSolidsPerChunk[chunkId],u=c*maxSolidsPerVoxel,r=0;for(r=0;r<t;++r){uint e=solidsPerChunk[chunkId*maxSolids+r];float3 s=solidsScale[e],M=f;if(int(solidsAttrs[e].w)>>1&1)M.x=abs(M.x);float y=max(s.x,max(s.y,s.z))*1.732,p=length(solidsPos[e]-M)-y,n=(s.x+s.y+s.z)*.333333,z=n*2.;if(p<z){prefilteredSolidIds[u+i]=e;i+=1;m+=abs(solidsBlend[e])*n;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float u=chunkSize/64;float3 t=c(i,u);int x=f(i.x,i.y,i.z,64);if(x==0)numPointsInChunk[chunkId]=0;float3 y=chunksCenter[chunkId];uint M=0;float z=0.;c(t+y,u*.5,x,M,z);float o=u*.25,r=o*.5,m=u*.5,p=chunkSize/256,n=chunkSize*.5;int e=x*maxSolidsPerVoxelMask;for(uint d=0;d<maxSolidsPerVoxelMask;++d)solidsFilter[e+d]=-1;float D=s(t+y,u,z+u,M,x);for(uint S=0;S<8;++S){float3 g=t+o*cardinalCellOffset[S];for(uint k=0;k<8;++k){float3 v=g+r*cardinalCellOffset[k];int3 l=int3(round((v.x+n-r)/p),round((v.y+n-r)/p),round((v.z+n-r)/p));int w=f(l.x,l.y,l.z,256);gridData[w]=float3(0,0,0);if(abs(D)<u){int a=0;float3 X=float3(1.,1.,1.);float Y=f(v+y,r,a,X,M,x,w);if(abs(Y)<m){int Z=solidsClayObjectId[a]+1;gridData[w]=float3(Y,f(X),Z);}}}}}float d(float f,float c){float i=c-f,u=.5;if(i!=0.)u=f/i;return u;}float2 i(float2 f){float2 t=f.xy>=0.?1.:-1.,u=(1.-abs(f.yx))*t;return u;}float m(float2 i){int f=32;float c=floor(i.x*(f-1)),u=floor(i.y*(f-1)),t=c*f+u;return t;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float t=m(f.xy);return t;}int c(uint f,uint x,uint i,uint t){int s=f<<24|x<<16|i<<8|t;return s;}float p(float3 i){float t=dot(round(i*255),float3(65536,256,1));return t;}void i(int3 u,float x){if(u.x>254||u.y>254||u.z>254){return;}int e=f(u.x,u.y,u.z,256);float3 s=gridData[e];if(s.z==0.){return;}float n[8];uint t=0;for(int m=0;m<8;++m){int3 M=u+localGridCellCoords[m];int y=f(M.x,M.y,M.z,256);float3 g=gridData[y];if(g.z==0.){return;}n[m]=g.x;if(g.x<=0.)t|=1<<m;}int r=cubeEdgeFlags[t];if(r==0){return;}int y=t*16,M=triangleConnectionTable[y+3];float g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);float3 z=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+4];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);float3 o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+5];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);float3 S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M],p=z+o+S,D=cross(S-z,o-z);if(dot(D,D)>0.){M=triangleConnectionTable[y];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);z=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+1];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+2];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];D+=cross(S-z,o-z);M=triangleConnectionTable[y+6];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);z=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+7];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+8];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];D+=cross(S-z,o-z);M=triangleConnectionTable[y+9];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);z=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+10];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[y+11];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];D+=cross(S-z,o-z);D=normalize(D);p/=3;int k=s.y,w=s.z;float3 v=p-float3(.5,.5,.5);float a=dot(v,D);float3 l=D;l/=abs(l.x)+abs(l.y)+abs(l.z);l.xy=l.z>=0.?l.xy:i(l.xy);l.xy=l.xy*.5+.5;a=a*.5+.5;int3 Y=c(k);int X=0;InterlockedAdd(gs_numElements,1,X);if(X<255)gs_pointCloudData[X]=int3(c(u.x,u.y,u.z,uint(round(l.x*255.))),f(uint(round(a*63.)),uint(round(Y.x/256.*63.)),uint(round(Y.y/256.*63.)),uint(round(Y.z/256.*63.)),uint(round(l.y*255.))),w);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 f:SV_DispatchThreadID,uint M:SV_GroupIndex){float u=chunkSize/256;i(f,u);GroupMemoryBarrierWithGroupSync();if(M==0)InterlockedAdd(numPointsInChunk[chunkId],gs_numElements*3,gs_globalOffset),gs_globalOffset/=3;GroupMemoryBarrierWithGroupSync();if(M<gs_numElements){int3 s=gs_pointCloudData[M];int t=gs_globalOffset+M;chunkPointCloudData[chunkId*maxPointCount+t]=s.xy;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+t]=s.z;}}int4 g(uint f){uint i=f>>24,u=(16711680&f)>>16,M=(65280&f)>>8,z=255&f;return int4(i,u,M,z);}void g(uint f,uint t){uint M=f/5,u=round(float(float(f)/5.-M)*5),i=pointToChunkId[M],s[5];s[0]=i&63;i>>=6;s[1]=i&63;i>>=6;s[2]=i&63;i>>=6;s[3]=i&63;i>>=6;s[4]=i&63;s[u]=t;uint c=(((s[4]<<6|s[3])<<6|s[2])<<6|s[1])<<6|s[0];pointToChunkId[M]=c;}uint k(uint f,uint i){uint t=f/5,u=6*round(float(float(f)/5.-t)*5),s=(1<<6)-1&i>>u;return s;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int M=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint u=numPointsInChunk[M],i;InterlockedAdd(indirectDrawArgs[0],u,i);uint t=u/3;i/=3;for(uint m=0;m<t;++m){uint x=i+m;pointCloudData[x]=chunkPointCloudData[M*maxPointCount+m];g(x,M);if(storeSolidId==1)pointCloudDataToSolidId[x]=chunkPointCloudDataToSolidId[M*maxPointCount+m];}}[numthreads(1,1,1)]void optimizePointCloud(int3 f:SV_DispatchThreadID){uint c=indirectDrawArgs[0],u=c/3,i=u;for(uint M=0;M<u;++M){int4 s=g(pointCloudData[M].x);float t=frac(sin(dot(float2(s.x,s.y),float2(12.9898,78.233+s.z)))*43758.5);uint x=round(t*(i-1));i-=1;uint z=k(i,pointToChunkId[i/5]);int2 m=pointCloudData[i];pointCloudData[i]=pointCloudData[x];pointCloudData[x]=m;uint r=k(x,pointToChunkId[x/5]);g(i,r);g(x,z);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 f:SV_DispatchThreadID){}float4 v(uint i){int f=(i&255)>>0,u=(i&65280)>>8,M=(i&16711680)>>16;return float4(f/255.,u/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float u=chunkSize/64;float3 t=c(i,u);int x=f(i.x,i.y,i.z,64);float3 y=chunksCenter[chunkId];uint M=0;float z=0.;c(t+y,u*.5,x,M,z);float g=u*.25,o=g*.5,n=u*.5,r=chunkSize/256,m=chunkSize*.5;int e=x*maxSolidsPerVoxelMask;for(uint d=0;d<maxSolidsPerVoxelMask;++d)solidsFilter[e+d]=-1;float k=s(t+y,u,z+u,M,x);for(uint S=0;S<8;++S){float3 v=t+g*cardinalCellOffset[S];for(uint p=0;p<8;++p){float3 l=v+o*cardinalCellOffset[p];int3 D=int3(round((l.x+m-o)/r),round((l.y+m-o)/r),round((l.z+m-o)/r));int w=f(D.x,D.y,D.z,256);gridData[w]=float3(0,0,0);int a=0;float3 X=float3(1.,1.,1.);float Y=f(l+y,o,a,X,M,x,w);int Z=solidsClayObjectId[a]+1;gridData[w]=float3(Y,f(X),Z);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void x(int3 f:SV_DispatchThreadID){}float3 m(int3 i,out float3 m){float u=chunkSize/256;int M=f(i.x,i.y,i.z,256);float3 s=gridData[M];m=v(s.y).xyz;float n[8];int e=0,z=0;for(int t=0;t<8;++t){int3 r=i+localGridCellCoords[t];int x=f(r.x,r.y,r.z,256);float3 g=gridData[x];n[t]=g.x;if(g.z==0.){continue;}if(g.x<0.)e|=1<<t;}int g=cubeEdgeFlags[e];float3 x=c(i,u);int r=0;float3 y=float3(0,0,0);for(int o=0;o<12;++o){if((g&1<<o)!=0){float S=n[edgeConnection[o].x],p=n[edgeConnection[o].y],D=d(S,p);y+=x+(vertexOffset[edgeConnection[o].x]-D*edgeDirection[o])*u;r+=1;}}y/=r;return y;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int M=f(i.x+1,i.y+1,i.z+1,256);float3 s=gridData[M],u,x,z,c,t=chunksCenter[chunkId],n=m(int3(i.x,i.y,i.z),u)+t,y,r,g,S;int e=f(i.x,i.y+1,i.z+1,256);float3 l=gridData[e];if(sign(s.x)!=sign(l.x)){y=m(int3(i.x,i.y,i.z+1),x)+t;r=m(int3(i.x,i.y+1,i.z+1),z)+t;g=m(int3(i.x,i.y+1,i.z),c)+t;if(s.x>l.x)S=g,g=y,y=S,S=c,c=x,x=S;uint d=meshOutIndices.IncrementCounter();int o=d*3;meshOutPoints[o]=n;meshOutIndices[d][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(u,1);o=d*3+1;meshOutPoints[o]=y;meshOutIndices[d][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(x,1);o=d*3+2;meshOutPoints[o]=r;meshOutIndices[d][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(z,1);d=meshOutIndices.IncrementCounter();o=d*3;meshOutPoints[o]=n;meshOutIndices[d][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(u,1);o=d*3+1;meshOutPoints[o]=r;meshOutIndices[d][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(z,1);o=d*3+2;meshOutPoints[o]=g;meshOutIndices[d][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(c,1);}e=f(i.x+1,i.y,i.z+1,256);l=gridData[e];if(sign(s.x)!=sign(l.x)){y=m(int3(i.x,i.y,i.z+1),x)+t;r=m(int3(i.x+1,i.y,i.z+1),z)+t;g=m(int3(i.x+1,i.y,i.z),c)+t;if(s.x<l.x)S=g,g=y,y=S,S=c,c=x,x=S;uint d=meshOutIndices.IncrementCounter();int o=d*3;meshOutPoints[o]=n;meshOutIndices[d][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(u,1);o=d*3+1;meshOutPoints[o]=y;meshOutIndices[d][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(x,1);o=d*3+2;meshOutPoints[o]=r;meshOutIndices[d][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(z,1);d=meshOutIndices.IncrementCounter();o=d*3;meshOutPoints[o]=n;meshOutIndices[d][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(u,1);o=d*3+1;meshOutPoints[o]=r;meshOutIndices[d][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(z,1);o=d*3+2;meshOutPoints[o]=g;meshOutIndices[d][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(c,1);}e=f(i.x+1,i.y+1,i.z,256);l=gridData[e];if(sign(s.x)!=sign(l.x)){y=m(int3(i.x,i.y+1,i.z),x)+t;r=m(int3(i.x+1,i.y+1,i.z),z)+t;g=m(int3(i.x+1,i.y,i.z),c)+t;if(s.x>l.x)S=g,g=y,y=S,S=c,c=x,x=S;uint o=meshOutIndices.IncrementCounter();int d=o*3;meshOutPoints[d]=n;meshOutIndices[o][0]=d+outMeshIndexOffset;meshOutColors[d]=float4(u,1);d=o*3+1;meshOutPoints[d]=y;meshOutIndices[o][1]=d+outMeshIndexOffset;meshOutColors[d]=float4(x,1);d=o*3+2;meshOutPoints[d]=r;meshOutIndices[o][2]=d+outMeshIndexOffset;meshOutColors[d]=float4(z,1);o=meshOutIndices.IncrementCounter();d=o*3;meshOutPoints[d]=n;meshOutIndices[o][0]=d+outMeshIndexOffset;meshOutColors[d]=float4(u,1);d=o*3+1;meshOutPoints[d]=r;meshOutIndices[o][1]=d+outMeshIndexOffset;meshOutColors[d]=float4(z,1);d=o*3+2;meshOutPoints[d]=g;meshOutIndices[o][2]=d+outMeshIndexOffset;meshOutColors[d]=float4(c,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 f:SV_DispatchThreadID){int M=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;float x=chunkSize/256.*seamOffsetMultiplier,u=chunkSize-x,i=chunkSize*.5;float3 t=float3(-(chunkSize*numChunksX*.5)+i+u*f.x,-(chunkSize*numChunksY*.5)+i+u*f.y,-(chunkSize*numChunksZ*.5)+i+u*f.z);chunksCenter[M]=t;float z=chunkSize*1.732*.5;int d=M*3,r=updateChunks[M]-1;if(r<-1)r=-1;int o=0;for(uint m=0;m<numSolids;++m){float3 s=solidsScale[m];float g=max(s.x,max(s.y,s.z))*1.732;float3 c=t;if(checkMirrorX(solidsAttrs[m].w))c.x=abs(c.x);float3 S=solidsPos[m];float y=length(S-c)-g;if(y<z){solidsPerChunk[M*maxSolids+o]=m;o+=1;if(r<=0){for(uint e=0;e<numSolidsUpdated;++e){uint l=solidsUpdated[e];if(l==m){r=1;break;}}}}}numSolidsPerChunk[M]=o;uint s=0,c=0;if(r>-1)s=64/MAXTHREADS,c=256/MAXTHREADS;updateChunks[M]=r;indirectChunkArgs1[d]=s;indirectChunkArgs1[d+1]=s;indirectChunkArgs1[d+2]=s;indirectChunkArgs2[d]=c;indirectChunkArgs2[d+1]=c;indirectChunkArgs2[d+2]=c;}